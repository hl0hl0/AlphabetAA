#     @@@    @@       @@@@@@@@  @@     @@    @@@    @@@@@@@@  @@@@@@@@ @@@@@@@@    @@@       @@@
#    @@ @@   @@       @@     @@ @@     @@   @@ @@   @@     @@ @@          @@      @@ @@     @@ @@
#   @@   @@  @@       @@     @@ @@     @@  @@   @@  @@     @@ @@          @@     @@   @@   @@   @@
#  @@     @@ @@       @@@@@@@@  @@@@@@@@@ @@     @@ @@@@@@@@  @@@@@@      @@    @@     @@ @@     @@
#  @@@@@@@@@ @@       @@        @@     @@ @@@@@@@@@ @@     @@ @@          @@    @@@@@@@@@ @@@@@@@@@
#  @@     @@ @@       @@        @@     @@ @@     @@ @@     @@ @@          @@    @@     @@ @@     @@
#  @@     @@ @@@@@@@@ @@        @@     @@ @@     @@ @@@@@@@@  @@@@@@@@    @@    @@     @@ @@     @@

import argparse
import re

available_chars = "[A-Z0-9!? ]"

def load_large_alphabet()->dict:
    """ソースコードのコメント部分から文字に対応するAA辞書を作成/返す"""
    source_code = ""
    with open(__file__, 'r', encoding="utf-8") as f:
        source_code = f.read()
    # 正規表現で引っ掛けて対応表となる辞書を作成
    matches = re.findall(
        rf"#({available_chars}+)\n\"\"\"([\s\S]*?)\"\"\"",
        source_code
        )
    alphabet_dict = {match[0]:match[1].split("\n") for match in matches}

    return alphabet_dict


def count_line_nums(alphabet_dict:dict)->int:
    """AAの行数が全部一緒であることを確かめて行数を返す"""
    # 同じ行数であることを確かめる 違う行数の場合正しく動かないため
    unique_line_nums = set(map(len,alphabet_dict.values()))
    if len(unique_line_nums) != 1:
        raise SyntaxError("AA部分に異なる行数の文字が含まれています")
    
    # AA部分の行数を返す
    line_num = unique_line_nums.pop()
    return line_num


def create_large_alphabet(text:str, symbol:str) -> str:
    """アルファベットパターンから文字列を生成"""
    # このソースコードをテキストとして読み込ませる
    alphabet_dict = load_large_alphabet()
    # 使用可能な文字のみで構成されているかチェック
    for char in text:
        if char.upper() not in alphabet_dict:
            raise ValueError(
                f"変換出来ない文字が含まれています: {char}\n "
                f"変換できるのは以下の文字のみです: {available_chars}"
            )
    # 行数を確かめる
    line_num = count_line_nums(alphabet_dict)
    # 入力全体を大文字に変換
    text = text.upper()
    # コメント記号を各行に設定
    large_aa_list = [symbol+"  "]*line_num
    # 各行ごとに各文字の該当行を入れていく
    for i in range(line_num):
        for char in text:
            targe_line_aa = alphabet_dict[char][i]
            large_aa_list[i] += targe_line_aa
    
    # 最終的に出力する文字列を作成        
    # 行数は1行目と最終行は空文字なので抜く
    large_aa_text = "\n".join(large_aa_list[1:line_num-1])
    
    return large_aa_text


def main():
    # プログラム説明文
    parser = argparse.ArgumentParser(
        usage = "python alphabet.py <text> [<symbol>]",
        description = "CLI tool that outputs large alphabets as comments."
    )
    # 引数の設定
    parser.add_argument(
        "text",
        type = str, 
        help = "convert text"
        )
    parser.add_argument(
        "-s","--symbol",
        type = str,
        help = "symbol at the head of a line",
        default = "#"
        )
    # 取得
    args = parser.parse_args()
    # 生成
    large_aa = create_large_alphabet(args.text, args.symbol)
    # 出力
    print(large_aa)


if __name__ == "__main__":
    main()


#     @@@     @@@@@@   @@@@@@    @@@@     @@@@          @@@    @@@@@@@@  @@@@@@@@
#    @@ @@   @@    @@ @@    @@    @@       @@          @@ @@   @@     @@    @@
#   @@   @@  @@       @@          @@       @@         @@   @@  @@     @@    @@
#  @@     @@  @@@@@@  @@          @@       @@        @@     @@ @@@@@@@@     @@
#  @@@@@@@@@       @@ @@          @@       @@        @@@@@@@@@ @@   @@      @@
#  @@     @@ @@    @@ @@    @@    @@       @@        @@     @@ @@    @@     @@
#  @@     @@  @@@@@@   @@@@@@    @@@@     @@@@       @@     @@ @@     @@    @@

# ここから下でAAを読み込む
#A
"""
   @@@    
  @@ @@   
 @@   @@  
@@     @@ 
@@@@@@@@@ 
@@     @@ 
@@     @@ 
"""
#B
"""
@@@@@@@@  
@@     @@ 
@@     @@ 
@@@@@@@@  
@@     @@ 
@@     @@ 
@@@@@@@@  
"""
#C
"""
 @@@@@@  
@@    @@ 
@@       
@@       
@@       
@@    @@ 
 @@@@@@  
"""
#D
"""
@@@@@@@@  
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
@@@@@@@@  
"""
#E
"""
@@@@@@@@ 
@@       
@@       
@@@@@@   
@@       
@@       
@@@@@@@@ 
"""
#F
"""
@@@@@@@@ 
@@       
@@       
@@@@@@   
@@       
@@       
@@       
"""
#G
"""
 @@@@@@   
@@    @@  
@@        
@@   @@@@ 
@@    @@  
@@    @@  
 @@@@@@   
"""
#H
"""
@@     @@ 
@@     @@ 
@@     @@ 
@@@@@@@@@ 
@@     @@ 
@@     @@ 
@@     @@ 
"""
#I
"""
  @@@@   
   @@    
   @@    
   @@    
   @@    
   @@    
  @@@@   
"""
#J
"""
      @@ 
      @@ 
      @@ 
      @@ 
@@    @@ 
@@    @@ 
 @@@@@@  
"""
#K
"""
@@    @@ 
@@   @@  
@@  @@   
@@@@@    
@@  @@   
@@   @@  
@@    @@ 
"""
#L
"""
@@       
@@       
@@       
@@       
@@       
@@       
@@@@@@@@ 
"""
#M
"""
@@     @@ 
@@@   @@@ 
@@@@ @@@@ 
@@ @@@ @@ 
@@     @@ 
@@     @@ 
@@     @@ 
"""
#N
"""
@@    @@ 
@@@   @@ 
@@@@  @@ 
@@ @@ @@ 
@@  @@@@ 
@@   @@@ 
@@    @@ 
"""
#O
"""
 @@@@@@@  
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
 @@@@@@@  
"""
#P
"""
@@@@@@@@  
@@     @@ 
@@     @@ 
@@@@@@@@  
@@        
@@        
@@        
"""
#Q
"""
 @@@@@@@  
@@     @@ 
@@     @@ 
@@     @@ 
@@  @@ @@ 
@@    @@  
 @@@@@ @@ 
"""
#R
"""
@@@@@@@@  
@@     @@ 
@@     @@ 
@@@@@@@@  
@@   @@   
@@    @@  
@@     @@ 
"""
#S
"""
 @@@@@@  
@@    @@ 
@@       
 @@@@@@  
      @@ 
@@    @@ 
 @@@@@@  
"""
#T
"""
@@@@@@@@ 
   @@    
   @@    
   @@    
   @@    
   @@    
   @@    
"""
#U
"""
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
 @@@@@@@  
"""
#V
"""
@@     @@ 
@@     @@ 
@@     @@ 
@@     @@ 
 @@   @@  
  @@ @@   
   @@@    
"""
#W
"""
@@      @@ 
@@  @@  @@ 
@@  @@  @@ 
@@  @@  @@ 
@@  @@  @@ 
@@  @@  @@ 
 @@@  @@@  
"""
#X
"""
@@     @@ 
 @@   @@  
  @@ @@   
   @@@    
  @@ @@   
 @@   @@  
@@     @@ 
"""
#Y
"""
@@    @@ 
 @@  @@  
  @@@@   
   @@    
   @@    
   @@    
   @@    
"""
#Z
"""
@@@@@@@@ 
     @@  
    @@   
   @@    
  @@     
 @@      
@@@@@@@@ 
"""
#0
"""
  @@@@@   
 @@   @@  
@@     @@ 
@@     @@ 
@@     @@ 
 @@   @@  
  @@@@@   
"""
#1
"""
    @@    
  @@@@    
    @@    
    @@    
    @@    
    @@    
  @@@@@@  
"""
#2
"""
 @@@@@@@  
@@     @@ 
       @@ 
 @@@@@@@  
@@        
@@        
@@@@@@@@@ 
"""
#3
"""
 @@@@@@@  
@@     @@ 
       @@ 
 @@@@@@@  
       @@ 
@@     @@ 
 @@@@@@@  
"""
#4
"""
@@        
@@    @@  
@@    @@  
@@    @@  
@@@@@@@@@ 
      @@  
      @@  
"""
#5
"""
@@@@@@@@  
@@        
@@        
@@@@@@@   
      @@  
@@    @@  
 @@@@@@   
"""
#6
"""
 @@@@@@@  
@@     @@ 
@@        
@@@@@@@@  
@@     @@ 
@@     @@ 
 @@@@@@@  
"""
#7
"""
 @@@@@@@@ 
 @@    @@ 
     @@   
    @@    
   @@     
   @@     
   @@     
"""
#8
"""
 @@@@@@@  
@@     @@ 
@@     @@ 
 @@@@@@@  
@@     @@ 
@@     @@ 
 @@@@@@@  
"""
#9
"""
 @@@@@@@  
@@     @@ 
@@     @@ 
 @@@@@@@@ 
       @@ 
@@     @@ 
 @@@@@@@  
"""
#!
"""
@@@@ 
@@@@ 
@@@@ 
 @@  
     
@@@@ 
@@@@ 
"""
#?
"""
 @@@@@@@  
@@     @@ 
      @@  
    @@@   
   @@     
          
   @@     
"""
# 
"""
    
    
    
    
    
    
    
"""